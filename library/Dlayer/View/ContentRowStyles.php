<?php
/**
* Content row styles view helper, generates the style string for a content 
* row using the data defind on the styling tabs
* 
* There is a child view helper for each styling group, this view helper calls 
* the child view helpers to generate the complete style string before 
* returning it the to content row
* 
* @author Dean Blackborough <dean@g3d-development.com>
* @copyright G3D Development Limited
*/
class Dlayer_View_ContentRowStyles extends Zend_View_Helper_Abstract 
{
	/**
	* Override the hinting for the view property so that we can see the view 
	* helpers that have been defined
	* 
	* @var Dlayer_View_Codehinting
	*/
	public $view;

	/**
	* The Id of the current content row
	* 
	* @var integer
	*/
	private $id; 
	
	/**
	* The complete styles data array for all the content rows that makde up 
	* the content page, grouped by style type
	* 
	* @var array
	*/
	private $styles;
	
	/**
	* Partial style string
	* 
	* @var string
	*/
	private $html;
	
	/** 
	* Content row styles view helper, generates the style string for a content 
	* row using the data defind on the styling tabs
	* 
	* There is a child view helper for each styling group, this view helper 
	* calls the child view helpers to generate the complete style string 
	* before returning it the to content row
	* 
	* @return Dlayer_View_ContentRowStyles
	*/
	public function contentRowStyles() 
	{
		return $this;
	}
	
	/**
	* Reset any internal params, we need to reset the internal params in case 
	* the view helper is called multiple times within the same script.
	* 
	* The styles data array is not reset as it contains the data for all the 
	* content items currently defined on the page, this view helper is called 
	* by each content item so to increase performances we only set the 
	* styles data once
	* 
	* @return void
	*/
	private function resetParams() 
	{
		$this->html = '';
		$this->id = NULL;
	}
	
	/**
	* Set the id of the current content row, in addition this will call the 
	* reset method to clear any previousy set values
	* 
	* @param integer $id
	* @return Dlayer_View_ContentRowStyles
	*/
	public function contentRow($id) 
	{
		$this->resetParams();
		
		$this->id = $id;

		return $this;
	}
	
	/**
	* Pass in the styles data array, this array contains any and all content 
	* row styles defined for every content item that is currently defined on 
	* the page.
	* 
	* There styles data array is indexed by style type, the render method will 
	* check each of the style types and call a child view helper where relevant
	* 
	* The styles data array is passed into the view helper using this method 
	* for performance reasons. This view helper and as a result all the child 
	* view helpers will be called for each content item that makes up the 
	* page, the data is passed in once by this method in the page view helper 
	* to ensure we aren't passing around several copies of what could be a 
	* large array.
	* 
	* @param array $styles The defined styles for every content row defined 
	* 	on the current page
	* @return Dlayer_View_ContentRowStyles
	*/
	public function setStyles(array $styles)
	{
		$this->styles = $styles;
		
		return $this;
	}
	
	/**
	* THis is the worker method for the view helper, it is responsible for 
	* calling each of the child view helpers to generate a style string if 
	* data is defined for the current content item container
	* 
	* @return string The generated html
	*/
	private function render() 
	{
		$html = '';
		
		if(array_key_exists('background_colors', $this->styles) == TRUE && 
			array_key_exists($this->id, 
				$this->styles['background_colors']) == TRUE) {
			
			$html .= $this->view->stylesBackgroundColor(
				$this->styles['background_colors'][$this->id]);
		}
		
		if(strlen($html) > 0) {
			$this->html = ' style="' . $html . '" ';
		}
		
		return $this->html;
	}
	
	/**
	* This view helper can be ouput directly using print and echo, there is no 
	* need to call the render method. The __toString method is defined to allow 
	* this functionality, all it does it call the render method
	*
	* @return string The html generated by the render method
	*/
	public function __toString() 
	{
		return $this->render();
	}
}